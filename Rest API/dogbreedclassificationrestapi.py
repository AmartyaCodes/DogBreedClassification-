# -*- coding: utf-8 -*-
"""DogBreedClassificationRestAPI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AOCEK25aqH4amDQ8_85P0hzYbD5TSQfb

# CREATING A FLASK REST API
"""

!pip install flask-ngrok

pip install flask gevent requests pillow

"""## IMPORTING NECESSARY LIBRARIES"""

import tensorflow as tf
from __future__ import division, print_function
# coding=utf-8
import sys
import os
import glob
import re
import numpy as np

# Keras
from keras.applications.imagenet_utils import preprocess_input, decode_predictions
from keras.models import load_model
from keras.preprocessing import image

# Flask utils
from flask import Flask, redirect, url_for, request, render_template
from werkzeug.utils import secure_filename
from gevent.pywsgi import WSGIServer

import os
os.mkdir('uploads')

"""## USING RESNET 50 MODEL TO PREDICT"""

# import the necessary packages
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.applications import imagenet_utils
from PIL import Image
import numpy as np
import flask
import io
from flask_ngrok import run_with_ngrok
from flask import Flask
# initialize our Flask application and the Keras model
app = flask.Flask(__name__)
run_with_ngrok(app)
#MODEL_PATH = '/content/drive/MyDrive/DogClassificationByResNet2.h5'

# Load your trained model
# model = load_model(MODEL_PATH,custom_objects={"custom_metric": custom_metric})
model = ResNet50(weights="imagenet")

"""# USING STATIC FILES AND TEMPLATES"""

from zipfile import ZipFile
file_name = "/content/templates.zip"

with ZipFile(file_name , 'r') as zip:
  zip.extractall()
  print('Done')

from zipfile import ZipFile
file_name = "/content/static.zip"

with ZipFile(file_name , 'r') as zip:
  zip.extractall()
  print('Done')

"""# Defining the model and workflows"""

def model_predict(img_path, model):
    img = image.load_img(img_path, target_size=(224, 224))

    # Preprocessing the image
    x = image.img_to_array(img)
    # x = np.true_divide(x, 255)
    x = np.expand_dims(x, axis=0)

    # Be careful how your trained model deals with the input
    # otherwise, it won't make correct prediction!
    x = preprocess_input(x, mode='caffe')

    preds = model.predict(x)
    return preds

@app.route('/', methods=['GET'])
def index():
    # Main page
    return render_template('index.html')

@app.route('/predict', methods=['GET', 'POST'])
def upload():
    if request.method == 'POST':
        # Get the file from post request
        f = request.files['file']

        # Save the file to ./uploads
        basepath = os.path.dirname('/content/')
        file_path = os.path.join(
            basepath, 'uploads', secure_filename(f.filename))
        f.save(file_path)

        # Make prediction
        preds = model_predict(file_path, model)

        # Process your result for human
        # pred_class = preds.argmax(axis=-1)            # Simple argmax
        pred_class = decode_predictions(preds, top=1)   # ImageNet Decode
        result = str(pred_class[0][0][1])               # Convert to string
        return result
    return None

if __name__ == '__main__':
    app.run()